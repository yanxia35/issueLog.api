using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System.Threading;
using System.Threading.Tasks;
using System;
using System.Collections.Generic;
using IssueLog.API.Models;
using IssueLog.API.Data;
using Microsoft.Extensions.DependencyInjection;

namespace IssueLog.API  
{
    public class ScheduleTaskService : IHostedService, IDisposable
    {
        private readonly ILogger<ScheduleTaskService> _logger;
        private readonly IEmailService _emailService;
        private readonly IReportRepository _reportRepository;
        private Timer actionTimer;
        private Timer GIExpressTimer;
        public ScheduleTaskService(ILogger<ScheduleTaskService> logger, IServiceProvider serviceProvider)
        {
            _logger = logger;
            _emailService = serviceProvider.CreateScope().ServiceProvider.GetRequiredService<IEmailService>();
            _reportRepository = serviceProvider.CreateScope().ServiceProvider.GetRequiredService<IReportRepository>();
        }


        /*
        * The function generated by IHostedService
        * The function will be excuted when the application start
        */        
        public Task StartAsync(CancellationToken cancellationToken)
        {
            lateActionReport();
            lateGIExpressReport();
            return Task.CompletedTask;
        }
        
        
        /*
        * The function generated by IHostedService
        * The function will be excuted when the application end
        */
        public Task StopAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation("ScheduleTaskService stopping, timer will be disposed"); 
            actionTimer.Dispose();                                                              
            GIExpressTimer.Dispose();
            return Task.CompletedTask;
        }

        /*
        * The function generated by IIDisposable  
        */
        public void Dispose()
        {
            actionTimer?.Dispose();
            GIExpressTimer?.Dispose();
        }


        /*
        * The function create a timer which run one per day to send email to notify the late actions
        */
        private void lateActionReport()
        {
            actionTimer = new Timer(new TimerCallback(ActionReporter));         // A Timer that will call function: worker when the Timer is activated.
        
            DateTime now = DateTime.Now;                                        // get the current time
            DateTime target = DateTime.Today.AddHours(7.0);                     // set the target time to 7:00 AM
            if (now > target)
            {       
                target = target.AddDays(1.0);                                   // If current time already pass the target time, set the target time to tommorow
            }
            
            TimeSpan delayTime = target - now;                                  // calculate the difference between current time and target time
            //TimeSpan intervalTime = new TimeSpan(0, 0, 0, 0, -1);             // this set the interval Time to infinity, which means timer will only active once
            TimeSpan intervalTime = new TimeSpan(24, 0, 0);                     // Send Email every 24 Hours.
            actionTimer.Change(delayTime,intervalTime);                         // set Timer with delay and interval
        }


        /*
        * The function being called when the actionTimer is activated
        * Call function to send a action late report to users
        */
        private async void ActionReporter(object state)
        {
             actionTimer = (Timer) state;
             if(DateTime.Now.DayOfWeek != DayOfWeek.Saturday && DateTime.Now.DayOfWeek != DayOfWeek.Sunday)
             {
                await _reportRepository.SendReportActionPastDueDate();    // only send email during workdays
             }
             
        }


        private void lateGIExpressReport()
        {
            GIExpressTimer = new Timer(new TimerCallback(GIExpressReporter));           
        
            DateTime now = DateTime.Now;                                       
            DateTime target = DateTime.Today.AddHours(9.0);   
            if (now > target)
            {       
                target = target.AddDays(1.0);                                   
            }
            
            TimeSpan delayTime = target - now;                                
            //TimeSpan intervalTime = new TimeSpan(0, 0, 0, 0, -1);             
            TimeSpan intervalTime = new TimeSpan(0, 15, 0);                     
            GIExpressTimer.Change(delayTime,intervalTime);                             
        }

        private async void GIExpressReporter(object state)
        {
            
             GIExpressTimer = (Timer) state;
             
             TimeSpan start = new TimeSpan(9, 0, 0); //9 o'clock
             TimeSpan end = new TimeSpan(16, 30, 0); //16:30 o'clock

             if(DateTime.Now.DayOfWeek != DayOfWeek.Saturday && DateTime.Now.DayOfWeek != DayOfWeek.Sunday && DateTime.Now.TimeOfDay > start && DateTime.Now.TimeOfDay < end)
             {
                await _reportRepository.SendGIExpressPastDueDate();    // only send email during workdays 9 - 4:30
             }

        }
    }
}