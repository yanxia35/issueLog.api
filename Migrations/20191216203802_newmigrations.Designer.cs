// <auto-generated />
using System;
using IssueLog.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IssueLog.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20191216203802_newmigrations")]
    partial class newmigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("IssueLog.API.Models.EcPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("IssueId")
                        .HasColumnName("issue_id");

                    b.Property<string>("PoNumber")
                        .HasColumnName("po_number");

                    b.Property<string>("ProjectNo")
                        .HasColumnName("project_no");

                    b.Property<double>("Quantity")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnName("release_date");

                    b.Property<string>("SupplierName")
                        .HasColumnName("supplier_name");

                    b.Property<string>("partNo")
                        .HasColumnName("part_no");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.ToTable("v_ec_parts","issue_log");
                });

            modelBuilder.Entity("IssueLog.API.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<string>("GroupId")
                        .HasColumnName("group_id");

                    b.Property<bool>("IsFormer")
                        .HasColumnName("is_former");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasColumnName("phone");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name");

                    b.HasKey("Id");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("IssueLog.API.Models.FailureMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("FailureModeDesc")
                        .HasColumnName("failure_mode_desc");

                    b.Property<string>("FailureType")
                        .HasColumnName("failure_type");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("failure_modes","issue_log");
                });

            modelBuilder.Entity("IssueLog.API.Models.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<int>("FailureModeId")
                        .HasColumnName("failure_mode_id");

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnName("follow_up_date");

                    b.Property<bool>("IsMissingParts")
                        .HasColumnName("is_missing_parts");

                    b.Property<DateTime?>("IssueClosedDate")
                        .HasColumnName("issue_closed_date");

                    b.Property<string>("IssueDescription")
                        .HasColumnName("issue_description");

                    b.Property<int>("IssueFoundProcessId")
                        .HasColumnName("issue_found_process_id");

                    b.Property<string>("IssueNo")
                        .HasColumnName("issue_no");

                    b.Property<string>("IssueNotes")
                        .HasColumnName("issue_notes");

                    b.Property<string>("IssueOwnerId")
                        .HasColumnName("issue_owner_id");

                    b.Property<string>("IssueStatus")
                        .HasColumnName("issue_status");

                    b.Property<string>("OriginatorId")
                        .HasColumnName("originator_id");

                    b.Property<string>("Project")
                        .HasColumnName("project");

                    b.Property<string>("ProjectNo")
                        .HasColumnName("project_no");

                    b.Property<int>("RootCauseProcessId")
                        .HasColumnName("root_cause_process_id");

                    b.HasKey("Id");

                    b.HasIndex("FailureModeId");

                    b.HasIndex("IssueFoundProcessId");

                    b.HasIndex("IssueOwnerId");

                    b.HasIndex("OriginatorId");

                    b.HasIndex("RootCauseProcessId");

                    b.ToTable("issues","issue_log");
                });

            modelBuilder.Entity("IssueLog.API.Models.IssueAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("ActionActiveDate")
                        .HasColumnName("action_active_date");

                    b.Property<DateTime?>("ActionClosedDate")
                        .HasColumnName("action_closed_date");

                    b.Property<string>("ActionNotes")
                        .HasColumnName("action_notes");

                    b.Property<string>("ActionStatus")
                        .HasColumnName("action_status");

                    b.Property<string>("CreatedById")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnName("due_date");

                    b.Property<DateTime?>("DueDateEnteredDate")
                        .HasColumnName("due_date_entered_date");

                    b.Property<int>("IssueId")
                        .HasColumnName("issue_id");

                    b.Property<string>("ResponsibleId")
                        .HasColumnName("responsible_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IssueId");

                    b.HasIndex("ResponsibleId");

                    b.ToTable("actions","issue_log");
                });

            modelBuilder.Entity("IssueLog.API.Models.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("MfgInfo")
                        .HasColumnName("MFG_INFO");

                    b.Property<string>("PartNo")
                        .HasColumnName("PART_NO");

                    b.HasKey("Id");

                    b.ToTable("PART_CATALOG","part_catalog");
                });

            modelBuilder.Entity("IssueLog.API.Models.PartIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<bool>("IsHardFlag")
                        .HasColumnName("is_hard_flag");

                    b.Property<bool>("IsResolved")
                        .HasColumnName("is_resolved");

                    b.Property<int>("IssueId")
                        .HasColumnName("issue_id");

                    b.Property<string>("PartNo")
                        .HasColumnName("part_no");

                    b.Property<string>("ResolvedBy")
                        .HasColumnName("resolved_by");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnName("resolved_date");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.ToTable("part_issue","issue_log");
                });

            modelBuilder.Entity("IssueLog.API.Models.Process", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Department")
                        .HasColumnName("department");

                    b.Property<string>("IssueProcess")
                        .HasColumnName("issue_process");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("processes","issue_log");
                });

            modelBuilder.Entity("IssueLog.API.Models.Subscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnName("employee_id");

                    b.Property<int>("IssueId")
                        .HasColumnName("issue_id");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IssueId");

                    b.ToTable("subscribers","issue_log");
                });

            modelBuilder.Entity("IssueLog.API.Models.TEcPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("IssueId")
                        .HasColumnName("issue_id");

                    b.Property<string>("ProjectNo")
                        .HasColumnName("project_no");

                    b.Property<double>("Quantity")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnName("release_date");

                    b.Property<string>("SupplierName")
                        .HasColumnName("supplier_name");

                    b.Property<string>("partNo")
                        .HasColumnName("part_no");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.ToTable("ec_parts","issue_log");
                });

            modelBuilder.Entity("IssueLog.API.Models.EcPart", b =>
                {
                    b.HasOne("IssueLog.API.Models.Issue", "Issue")
                        .WithMany("EcParts")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IssueLog.API.Models.Issue", b =>
                {
                    b.HasOne("IssueLog.API.Models.FailureMode", "FailureMode")
                        .WithMany()
                        .HasForeignKey("FailureModeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IssueLog.API.Models.Process", "IssueFoundProcess")
                        .WithMany()
                        .HasForeignKey("IssueFoundProcessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IssueLog.API.Models.Employee", "IssueOwner")
                        .WithMany()
                        .HasForeignKey("IssueOwnerId");

                    b.HasOne("IssueLog.API.Models.Employee", "Originator")
                        .WithMany()
                        .HasForeignKey("OriginatorId");

                    b.HasOne("IssueLog.API.Models.Process", "RootCauseProcess")
                        .WithMany()
                        .HasForeignKey("RootCauseProcessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IssueLog.API.Models.IssueAction", b =>
                {
                    b.HasOne("IssueLog.API.Models.Employee", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("IssueLog.API.Models.Issue", "Issue")
                        .WithMany("IssueActions")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IssueLog.API.Models.Employee", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId");
                });

            modelBuilder.Entity("IssueLog.API.Models.PartIssue", b =>
                {
                    b.HasOne("IssueLog.API.Models.Issue", "Issue")
                        .WithMany("PartIssues")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IssueLog.API.Models.Subscriber", b =>
                {
                    b.HasOne("IssueLog.API.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IssueLog.API.Models.Issue", "Issue")
                        .WithMany("Subscribers")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IssueLog.API.Models.TEcPart", b =>
                {
                    b.HasOne("IssueLog.API.Models.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
